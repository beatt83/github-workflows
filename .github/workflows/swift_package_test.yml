name: Swift Matrix

on:
  workflow_call:
    inputs:
      macos_xcode_versions:
        type: string
        description: "Xcode version list (JSON)"
        default: "[\"16.0\", \"16.1\", \"16.2\", \"16.3\"]"
      macos_exclude_xcode_versions:
        type: string
        description: "Exclude Xcode version list (JSON)"
        default: "[{\"xcode_version\": \"\"}]"
      macos_runners:
        type: string
        description: "macOS runners list (JSON)"
        default: "[\"macos-latest\"]"
      linux_runners:
        type: string
        description: "Linux runners list (JSON)"
        default: "[\"ubuntu-latest\"]"
      windows_runners:
        type: string
        description: "Windows runners list (JSON)"
        default: "[\"windows-latest\", \"windows-2022\"]"
      android_runners:
        type: string
        description: "Android runners list (JSON)"
        default: "[\"macos-13\"]"
      swift_versions:
        type: string
        description: "Include Swift version list (JSON)"
        default: "[ \"5.9\", \"5.10\", \"6.0\", \"6.1\", \"nightly-main\", \"nightly-6.1\"]"
      exclude_swift_versions:
        type: string
        description: "Exclude Swift version list (JSON)"
        default: "[{\"swift_version\": \"\"}]"
      swift_flags:
        type: string
        description: "Swift flags for release version"
        default: ""
      swift_nightly_flags:
        type: string
        description: "Swift flags for nightly version"
        default: ""
      pre_build_command:
        type: string
        description: "Linux command to execute before building the Swift package"
        default: ""
      build_command:
        type: string
        description: "macOS command to build and test the package"
        default: "swift test"
      macos_env_vars:
        description: "Newline separated list of environment variables"
        type: string
      linux_env_vars:
        description: "Newline separated list of environment variables"
        type: string
      windows_env_vars:
        description: "Newline separated list of environment variables"
        type: string
      android_env_vars:
        description: "Newline separated list of environment variables"
        type: string
      enable_macos_checks:
        type: boolean
        description: "Boolean to enable macOS testing. Defaults to true"
        default: true
      enable_linux_checks:
        type: boolean
        description: "Boolean to enable linux testing. Defaults to true"
        default: true
      enable_windows_checks:
        type: boolean
        description: "Boolean to enable windows testing. Defaults to true"
        default: true
      enable_android_checks:
        type: boolean
        description: "Boolean to enable android testing. Defaults to false"
        default: false
      enable_windows_docker:
        type: boolean
        description: "Boolean to enable running build in windows docker container. Defaults to true"
        default: true
      needs_token:
        type: boolean
        description: "Boolean to enable providing the GITHUB_TOKEN to downstream job."
        default: false

jobs:
  macos-build:
    name: macOS (Xcode ${{ matrix.xcode_version }} - ${{ matrix.macos_runners }})
    if: ${{ inputs.enable_macos_checks }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        xcode_version: ${{ fromJson(inputs.macos_xcode_versions) }}
        os: ${{ fromJson(inputs.macos_runners) }}
        exclude:
          - ${{ fromJson(inputs.macos_exclude_xcode_versions) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Provide token
        if: ${{ inputs.needs_token }}
        run: |
            echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
      - name: Set environment variables
        if: ${{ inputs.macos_env_vars }}
        run: |
            for i in "${{ inputs.macos_env_vars }}"
            do
              printf "%s\n" $i >> $GITHUB_ENV
            done
      - name: Select Xcode
        run: echo "DEVELOPER_DIR=/Applications/Xcode_${{ matrix.xcode_version }}.app" >> $GITHUB_ENV
      - name: Swift version
        run: xcrun swift --version
      - name: Pre-build
        run: ${{ inputs.macos_pre_build_command }}
      - name: Build / Test
        run: ${{ inputs.macos_build_command }}

  linux-build:
    name: Linux (${{ matrix.swift_version }} - ${{ matrix.os }})
    if: ${{ inputs.enable_linux_checks }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        swift_version: ${{ fromJson(inputs.swift_versions) }}
        os: ${{ fromJson(inputs.linux_runners) }}
        exclude:
          - ${{ fromJson(inputs.exclude_swift_versions) }}
    container:
      image: ${{ (contains(matrix.swift_version, 'nightly') && 'swiftlang/swift') || 'swift' }}:${{ matrix.swift_version }}-${{ matrix.os }}
    steps:
      - name: Swift version
        run: swift --version
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Provide token
        if: ${{ inputs.needs_token }}
        run: |
            echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
      - name: Set environment variables
        if: ${{ inputs.linux_env_vars }}
        run: |
            for i in "${{ inputs.linux_env_vars }}"
            do
              printf "%s\n" $i >> $GITHUB_ENV
            done
      - name: Pre-build
        run: ${{ inputs.pre_build_command }}
      - name: Build / Test
        run: ${{ inputs.build_command }} ${{ (contains(matrix.swift_version, 'nightly') && inputs.swift_nightly_flags) || inputs.swift_flags }}

  android-build:
    name: Linux (${{ matrix.swift_version }} - ${{ matrix.os }})
    if: ${{ inputs.enable_android_checks }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        swift_version: ${{ fromJson(inputs.swift_versions) }}
        os: ${{ fromJson(inputs.android_runners) }}
        exclude:
          - ${{ fromJson(inputs.exclude_swift_versions) }}
    container:
      image: ${{ (contains(matrix.swift_version, 'nightly') && 'swiftlang/swift') || 'swift' }}:${{ matrix.swift_version }}-${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Provide token
        if: ${{ inputs.needs_token }}
        run: |
            echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
      - name: Set environment variables
        if: ${{ inputs.android_env_vars }}
        run: |
            for i in "${{ inputs.android_env_vars }}"
            do
              printf "%s\n" $i >> $GITHUB_ENV
            done
      - name: Pre-build
        run: ${{ inputs.pre_build_command }}
      - name: Build / Test
        uses: skiptools/swift-android-action@v2
        with:
          swift-version: ${{ matrix.swift_version }}

  windows-build:
    name: Windows (${{ matrix.swift_version }} - ${{ inputs.enable_windows_docker && contains(matrix.swift_version, 'nightly') && 'windows-2019' || matrix.os }})
    if: ${{ inputs.enable_windows_checks }}
    runs-on: ${{ inputs.enable_windows_docker && contains(matrix.swift_version, 'nightly') && 'windows-2019' || matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        swift_version: ${{ fromJson(inputs.windows_swift_versions) }}
        os: ${{ fromJson(inputs.windows_runners) }}
        exclude:
          - ${{ fromJson(inputs.windows_exclude_swift_versions) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Provide token
        if: ${{ inputs.needs_token }}
        run: |
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - name: Set environment variables
        if: ${{ inputs.windows_env_vars }}
        run: |
          $lines = "${{ inputs.windows_env_vars }}" -split "`r`n"
          foreach ($line in $lines) {
              echo $line | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          }
      - name: Pull Docker image
        id: pull_docker_image
        if: ${{ inputs.enable_windows_docker }}
        run: |
          if ("${{ matrix.swift_version }}".Contains("nightly")) {
            $Image = "swiftlang/swift:${{ matrix.swift_version }}-windowsservercore-1809"
          } else {
            $Image = "swift:${{ matrix.swift_version }}-windowsservercore-ltsc2022"
          }
          docker pull $Image
          echo "image=$Image" >> "$env:GITHUB_OUTPUT"
      - name: Install Visual Studio Build Tools
        if: ${{ !inputs.enable_windows_docker }}
        run: |
          Invoke-WebRequest -Uri https://raw.githubusercontent.com/swiftlang/github-workflows/refs/heads/main/.github/workflows/scripts/windows/install-vsb.ps1 -OutFile $env:TEMP\install-vsb.ps1
          . $env:TEMP\install-vsb.ps1
          del $env:TEMP\install-vsb.ps1
      - name: Install Swift
        if: ${{ !inputs.enable_windows_docker }}
        run: |
          Invoke-WebRequest -Uri https://raw.githubusercontent.com/swiftlang/github-workflows/refs/heads/main/.github/workflows/scripts/windows/swift/install-swift.ps1 -OutFile $env:TEMP\install-swift.ps1
          Invoke-WebRequest -Uri https://raw.githubusercontent.com/swiftlang/github-workflows/refs/heads/main/.github/workflows/scripts/windows/swift/install-swift-${{ matrix.swift_version }}.ps1 -OutFile $env:TEMP\install-swift-${{ matrix.swift_version }}.ps1
          . $env:TEMP\install-swift-${{ matrix.swift_version }}.ps1
          del $env:TEMP\install-swift*.ps1
      - name: Create test script
        run: |
          mkdir $env:TEMP\test-script
          echo @'
          Set-PSDebug -Trace 1
          if ("${{ inputs.enable_windows_docker }}" -eq "true") {
            $Source = "C:\source"
          } else {
            $Source = $env:GITHUB_WORKSPACE
          }

          # Run the command following `Invoke-Program`.
          # If that command returns a non-zero exit code, return the same exit code from this script.
          function Invoke-Program($Executable) {
            & $Executable @args
            if ($LastExitCode -ne 0) {
              exit $LastExitCode
            }
          }
          Invoke-Program swift --version
          Invoke-Program swift test --version
          Invoke-Program cd $Source
          ${{ inputs.windows_pre_build_command }}
          Invoke-Program ${{ inputs.windows_build_command }} ${{ (contains(matrix.swift_version, 'nightly') && inputs.swift_nightly_flags) || inputs.swift_flags }}
          '@ >> $env:TEMP\test-script\run.ps1
      # Docker build
      - name: Docker Build / Test
        timeout-minutes: 60
        if: ${{ inputs.enable_windows_docker }}
        run: |
          docker run -v ${{ github.workspace }}:C:\source -v $env:TEMP\test-script:C:\test-script ${{ steps.pull_docker_image.outputs.image }} powershell.exe -NoLogo -File C:\test-script\run.ps1
      # Docker-less build
      - name: Build / Test
        timeout-minutes: 60
        if: ${{ !inputs.enable_windows_docker }}
        run: |
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
          RefreshEnv
          powershell.exe -NoLogo -File $env:TEMP\test-script\run.ps1; exit $LastExitCode
